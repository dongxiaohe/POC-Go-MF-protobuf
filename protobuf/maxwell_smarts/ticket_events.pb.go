// Code generated by protoc-gen-go. DO NOT EDIT.
// source: maxwell_smarts/ticket_events.proto

/*
Package com_zendesk_maxwellsmarts_zendesk_ticketevents is a generated protocol buffer package.

It is generated from these files:
	maxwell_smarts/ticket_events.proto

It has these top-level messages:
	Comment
	TicketCreation
	StatusChange
	TicketEvent
	TicketEvents
*/
package com_zendesk_maxwellsmarts_zendesk_ticketevents

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import com_zendesk_protobuf "../zendesk"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TicketStatus int32

const (
	TicketStatus_UNKNOWN_TICKET_STATUS TicketStatus = 0
	TicketStatus_NEW                   TicketStatus = 1
	TicketStatus_OPEN                  TicketStatus = 2
	TicketStatus_PENDING               TicketStatus = 3
	TicketStatus_HOLD                  TicketStatus = 4
	TicketStatus_SOLVED                TicketStatus = 5
	TicketStatus_CLOSED                TicketStatus = 6
	TicketStatus_DELETED               TicketStatus = 7
	TicketStatus_ARCHIVED              TicketStatus = 8
)

var TicketStatus_name = map[int32]string{
	0: "UNKNOWN_TICKET_STATUS",
	1: "NEW",
	2: "OPEN",
	3: "PENDING",
	4: "HOLD",
	5: "SOLVED",
	6: "CLOSED",
	7: "DELETED",
	8: "ARCHIVED",
}
var TicketStatus_value = map[string]int32{
	"UNKNOWN_TICKET_STATUS": 0,
	"NEW":      1,
	"OPEN":     2,
	"PENDING":  3,
	"HOLD":     4,
	"SOLVED":   5,
	"CLOSED":   6,
	"DELETED":  7,
	"ARCHIVED": 8,
}

func (x TicketStatus) String() string {
	return proto.EnumName(TicketStatus_name, int32(x))
}
func (TicketStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type EventType int32

const (
	EventType_UNKNOWN_EVENT_TYPE EventType = 0
	EventType_TICKET_CREATION    EventType = 1
	EventType_COMMENT_CREATION   EventType = 2
	EventType_STATUS_CHANGE      EventType = 3
	EventType_ASSIGNMENT_CHANGE  EventType = 4
)

var EventType_name = map[int32]string{
	0: "UNKNOWN_EVENT_TYPE",
	1: "TICKET_CREATION",
	2: "COMMENT_CREATION",
	3: "STATUS_CHANGE",
	4: "ASSIGNMENT_CHANGE",
}
var EventType_value = map[string]int32{
	"UNKNOWN_EVENT_TYPE": 0,
	"TICKET_CREATION":    1,
	"COMMENT_CREATION":   2,
	"STATUS_CHANGE":      3,
	"ASSIGNMENT_CHANGE":  4,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}
func (EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Comment struct {
	Text   string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	Public bool   `protobuf:"varint,2,opt,name=public" json:"public,omitempty"`
}

func (m *Comment) Reset()                    { *m = Comment{} }
func (m *Comment) String() string            { return proto.CompactTextString(m) }
func (*Comment) ProtoMessage()               {}
func (*Comment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Comment) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Comment) GetPublic() bool {
	if m != nil {
		return m.Public
	}
	return false
}

type TicketCreation struct {
	RequesterId int64        `protobuf:"varint,1,opt,name=requester_id,json=requesterId" json:"requester_id,omitempty"`
	Status      TicketStatus `protobuf:"varint,2,opt,name=status,enum=com.zendesk.maxwellsmarts.zendesk.ticketevents.TicketStatus" json:"status,omitempty"`
	Comment     *Comment     `protobuf:"bytes,3,opt,name=comment" json:"comment,omitempty"`
	AssigneeId  int64        `protobuf:"varint,4,opt,name=assignee_id,json=assigneeId" json:"assignee_id,omitempty"`
	GroupId     int64        `protobuf:"varint,5,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Description string       `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	RawSubject  string       `protobuf:"bytes,7,opt,name=raw_subject,json=rawSubject" json:"raw_subject,omitempty"`
	Tags        []string     `protobuf:"bytes,8,rep,name=tags" json:"tags,omitempty"`
	NiceId      int64        `protobuf:"varint,9,opt,name=nice_id,json=niceId" json:"nice_id,omitempty"`
}

func (m *TicketCreation) Reset()                    { *m = TicketCreation{} }
func (m *TicketCreation) String() string            { return proto.CompactTextString(m) }
func (*TicketCreation) ProtoMessage()               {}
func (*TicketCreation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TicketCreation) GetRequesterId() int64 {
	if m != nil {
		return m.RequesterId
	}
	return 0
}

func (m *TicketCreation) GetStatus() TicketStatus {
	if m != nil {
		return m.Status
	}
	return TicketStatus_UNKNOWN_TICKET_STATUS
}

func (m *TicketCreation) GetComment() *Comment {
	if m != nil {
		return m.Comment
	}
	return nil
}

func (m *TicketCreation) GetAssigneeId() int64 {
	if m != nil {
		return m.AssigneeId
	}
	return 0
}

func (m *TicketCreation) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *TicketCreation) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TicketCreation) GetRawSubject() string {
	if m != nil {
		return m.RawSubject
	}
	return ""
}

func (m *TicketCreation) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *TicketCreation) GetNiceId() int64 {
	if m != nil {
		return m.NiceId
	}
	return 0
}

type StatusChange struct {
	Previous TicketStatus `protobuf:"varint,1,opt,name=previous,enum=com.zendesk.maxwellsmarts.zendesk.ticketevents.TicketStatus" json:"previous,omitempty"`
	Current  TicketStatus `protobuf:"varint,2,opt,name=current,enum=com.zendesk.maxwellsmarts.zendesk.ticketevents.TicketStatus" json:"current,omitempty"`
}

func (m *StatusChange) Reset()                    { *m = StatusChange{} }
func (m *StatusChange) String() string            { return proto.CompactTextString(m) }
func (*StatusChange) ProtoMessage()               {}
func (*StatusChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StatusChange) GetPrevious() TicketStatus {
	if m != nil {
		return m.Previous
	}
	return TicketStatus_UNKNOWN_TICKET_STATUS
}

func (m *StatusChange) GetCurrent() TicketStatus {
	if m != nil {
		return m.Current
	}
	return TicketStatus_UNKNOWN_TICKET_STATUS
}

type TicketEvent struct {
	EventType EventType `protobuf:"varint,1,opt,name=event_type,json=eventType,enum=com.zendesk.maxwellsmarts.zendesk.ticketevents.EventType" json:"event_type,omitempty"`
	// Types that are valid to be assigned to EventData:
	//	*TicketEvent_TicketCreation
	//	*TicketEvent_CommentCreation
	//	*TicketEvent_StatusChange
	EventData isTicketEvent_EventData `protobuf_oneof:"event_data"`
}

func (m *TicketEvent) Reset()                    { *m = TicketEvent{} }
func (m *TicketEvent) String() string            { return proto.CompactTextString(m) }
func (*TicketEvent) ProtoMessage()               {}
func (*TicketEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type isTicketEvent_EventData interface {
	isTicketEvent_EventData()
}

type TicketEvent_TicketCreation struct {
	TicketCreation *TicketCreation `protobuf:"bytes,2,opt,name=ticket_creation,json=ticketCreation,oneof"`
}
type TicketEvent_CommentCreation struct {
	CommentCreation *Comment `protobuf:"bytes,3,opt,name=comment_creation,json=commentCreation,oneof"`
}
type TicketEvent_StatusChange struct {
	StatusChange *StatusChange `protobuf:"bytes,4,opt,name=status_change,json=statusChange,oneof"`
}

func (*TicketEvent_TicketCreation) isTicketEvent_EventData()  {}
func (*TicketEvent_CommentCreation) isTicketEvent_EventData() {}
func (*TicketEvent_StatusChange) isTicketEvent_EventData()    {}

func (m *TicketEvent) GetEventData() isTicketEvent_EventData {
	if m != nil {
		return m.EventData
	}
	return nil
}

func (m *TicketEvent) GetEventType() EventType {
	if m != nil {
		return m.EventType
	}
	return EventType_UNKNOWN_EVENT_TYPE
}

func (m *TicketEvent) GetTicketCreation() *TicketCreation {
	if x, ok := m.GetEventData().(*TicketEvent_TicketCreation); ok {
		return x.TicketCreation
	}
	return nil
}

func (m *TicketEvent) GetCommentCreation() *Comment {
	if x, ok := m.GetEventData().(*TicketEvent_CommentCreation); ok {
		return x.CommentCreation
	}
	return nil
}

func (m *TicketEvent) GetStatusChange() *StatusChange {
	if x, ok := m.GetEventData().(*TicketEvent_StatusChange); ok {
		return x.StatusChange
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TicketEvent) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TicketEvent_OneofMarshaler, _TicketEvent_OneofUnmarshaler, _TicketEvent_OneofSizer, []interface{}{
		(*TicketEvent_TicketCreation)(nil),
		(*TicketEvent_CommentCreation)(nil),
		(*TicketEvent_StatusChange)(nil),
	}
}

func _TicketEvent_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TicketEvent)
	// event_data
	switch x := m.EventData.(type) {
	case *TicketEvent_TicketCreation:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TicketCreation); err != nil {
			return err
		}
	case *TicketEvent_CommentCreation:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CommentCreation); err != nil {
			return err
		}
	case *TicketEvent_StatusChange:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StatusChange); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TicketEvent.EventData has unexpected type %T", x)
	}
	return nil
}

func _TicketEvent_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TicketEvent)
	switch tag {
	case 2: // event_data.ticket_creation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TicketCreation)
		err := b.DecodeMessage(msg)
		m.EventData = &TicketEvent_TicketCreation{msg}
		return true, err
	case 3: // event_data.comment_creation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Comment)
		err := b.DecodeMessage(msg)
		m.EventData = &TicketEvent_CommentCreation{msg}
		return true, err
	case 4: // event_data.status_change
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StatusChange)
		err := b.DecodeMessage(msg)
		m.EventData = &TicketEvent_StatusChange{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TicketEvent_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TicketEvent)
	// event_data
	switch x := m.EventData.(type) {
	case *TicketEvent_TicketCreation:
		s := proto.Size(x.TicketCreation)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TicketEvent_CommentCreation:
		s := proto.Size(x.CommentCreation)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TicketEvent_StatusChange:
		s := proto.Size(x.StatusChange)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TicketEvents struct {
	AccountId int32                                `protobuf:"varint,5,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ActorId   int64                                `protobuf:"varint,6,opt,name=actor_id,json=actorId" json:"actor_id,omitempty"`
	TicketId  int64                                `protobuf:"varint,7,opt,name=ticket_id,json=ticketId" json:"ticket_id,omitempty"`
	Events    []*TicketEvent                       `protobuf:"bytes,8,rep,name=events" json:"events,omitempty"`
	Header    *com_zendesk_protobuf.ProtobufHeader `protobuf:"bytes,2040,opt,name=header" json:"header,omitempty"`
}

func (m *TicketEvents) Reset()                    { *m = TicketEvents{} }
func (m *TicketEvents) String() string            { return proto.CompactTextString(m) }
func (*TicketEvents) ProtoMessage()               {}
func (*TicketEvents) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TicketEvents) GetAccountId() int32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *TicketEvents) GetActorId() int64 {
	if m != nil {
		return m.ActorId
	}
	return 0
}

func (m *TicketEvents) GetTicketId() int64 {
	if m != nil {
		return m.TicketId
	}
	return 0
}

func (m *TicketEvents) GetEvents() []*TicketEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *TicketEvents) GetHeader() *com_zendesk_protobuf.ProtobufHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func init() {
	proto.RegisterType((*Comment)(nil), "com.zendesk.maxwellsmarts.zendesk.ticketevents.Comment")
	proto.RegisterType((*TicketCreation)(nil), "com.zendesk.maxwellsmarts.zendesk.ticketevents.TicketCreation")
	proto.RegisterType((*StatusChange)(nil), "com.zendesk.maxwellsmarts.zendesk.ticketevents.StatusChange")
	proto.RegisterType((*TicketEvent)(nil), "com.zendesk.maxwellsmarts.zendesk.ticketevents.TicketEvent")
	proto.RegisterType((*TicketEvents)(nil), "com.zendesk.maxwellsmarts.zendesk.ticketevents.TicketEvents")
	proto.RegisterEnum("com.zendesk.maxwellsmarts.zendesk.ticketevents.TicketStatus", TicketStatus_name, TicketStatus_value)
	proto.RegisterEnum("com.zendesk.maxwellsmarts.zendesk.ticketevents.EventType", EventType_name, EventType_value)
}

func init() { proto.RegisterFile("maxwell_smarts/ticket_events.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 768 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4d, 0x6f, 0xf3, 0x44,
	0x10, 0x8e, 0xe3, 0xd4, 0x76, 0xc6, 0x79, 0x1b, 0xbf, 0x0b, 0x2d, 0x29, 0x08, 0x11, 0x22, 0x0e,
	0x55, 0x0f, 0xa9, 0x14, 0x84, 0x10, 0xe2, 0x43, 0x4a, 0x1d, 0xab, 0x31, 0x4d, 0x9d, 0x60, 0xbb,
	0x1f, 0x9c, 0x2c, 0xc7, 0x5e, 0x52, 0xd3, 0xc6, 0x0e, 0xde, 0x75, 0x3f, 0x38, 0xc1, 0x05, 0xf1,
	0x5f, 0xf8, 0x13, 0xfc, 0x2c, 0xb8, 0x21, 0xef, 0xae, 0x43, 0x7a, 0x4c, 0xfb, 0xde, 0x76, 0x1f,
	0xcf, 0x3e, 0x33, 0xf3, 0x3c, 0x33, 0x86, 0xde, 0x32, 0x7c, 0x7c, 0xc0, 0x77, 0x77, 0x01, 0x59,
	0x86, 0x39, 0x25, 0xc7, 0x34, 0x89, 0x6e, 0x31, 0x0d, 0xf0, 0x3d, 0x4e, 0x29, 0xe9, 0xaf, 0xf2,
	0x8c, 0x66, 0xa8, 0x1f, 0x65, 0xcb, 0xfe, 0xaf, 0x38, 0x8d, 0x31, 0xb9, 0xed, 0x8b, 0x78, 0x1e,
	0xbe, 0x46, 0xf9, 0x33, 0xfe, 0xea, 0xc3, 0x7d, 0x81, 0x1e, 0xb3, 0xe7, 0xf3, 0xe2, 0x27, 0xce,
	0xd3, 0xfb, 0x02, 0x54, 0x33, 0x5b, 0x2e, 0x71, 0x4a, 0x11, 0x82, 0x06, 0xc5, 0x8f, 0xb4, 0x23,
	0x75, 0xa5, 0xc3, 0xa6, 0xcb, 0xce, 0x68, 0x1f, 0x94, 0x55, 0x31, 0xbf, 0x4b, 0xa2, 0x4e, 0xbd,
	0x2b, 0x1d, 0x6a, 0xae, 0xb8, 0xf5, 0xfe, 0x94, 0x61, 0xd7, 0x67, 0xfc, 0x66, 0x8e, 0x43, 0x9a,
	0x64, 0x29, 0xfa, 0x14, 0x5a, 0x39, 0xfe, 0xa5, 0xc0, 0x84, 0xe2, 0x3c, 0x48, 0x62, 0x46, 0x23,
	0xbb, 0xfa, 0x1a, 0xb3, 0x63, 0xe4, 0x83, 0x42, 0x68, 0x48, 0x0b, 0xc2, 0xd8, 0x76, 0x07, 0xdf,
	0x6c, 0xd9, 0x45, 0x9f, 0xa7, 0xf4, 0x18, 0x87, 0x2b, 0xb8, 0xd0, 0x0f, 0xa0, 0x46, 0xbc, 0x85,
	0x8e, 0xdc, 0x95, 0x0e, 0xf5, 0xc1, 0x97, 0xdb, 0xd2, 0x0a, 0x05, 0xdc, 0x8a, 0x07, 0x7d, 0x02,
	0x7a, 0x48, 0x48, 0xb2, 0x48, 0x31, 0x2e, 0x5b, 0x69, 0xb0, 0x56, 0xa0, 0x82, 0xec, 0x18, 0x1d,
	0x80, 0xb6, 0xc8, 0xb3, 0x62, 0x55, 0x7e, 0xdd, 0x61, 0x5f, 0x55, 0x76, 0xb7, 0x63, 0xd4, 0x05,
	0x3d, 0xc6, 0x24, 0xca, 0x93, 0x55, 0x29, 0x4b, 0x47, 0x61, 0x6a, 0x6e, 0x42, 0x25, 0x7b, 0x1e,
	0x3e, 0x04, 0xa4, 0x98, 0xff, 0x8c, 0x23, 0xda, 0x51, 0x59, 0x04, 0xe4, 0xe1, 0x83, 0xc7, 0x11,
	0xe6, 0x44, 0xb8, 0x20, 0x1d, 0xad, 0x2b, 0x33, 0x27, 0xc2, 0x05, 0x41, 0x1f, 0x80, 0x9a, 0x26,
	0x11, 0x2b, 0xa7, 0xc9, 0x12, 0x2a, 0xe5, 0xd5, 0x8e, 0x7b, 0x7f, 0x4b, 0xd0, 0xe2, 0x8a, 0x98,
	0x37, 0x61, 0xba, 0xc0, 0xe8, 0x1a, 0xb4, 0x55, 0x8e, 0xef, 0x93, 0xac, 0x20, 0xcc, 0x84, 0xd7,
	0xea, 0xbc, 0x66, 0x43, 0x97, 0xa0, 0x46, 0x45, 0x9e, 0x97, 0x4a, 0xbf, 0x0b, 0x03, 0x2b, 0xb2,
	0xde, 0x5f, 0x32, 0xe8, 0xfc, 0x8b, 0x55, 0x86, 0xa1, 0x6b, 0x00, 0x16, 0x1f, 0xd0, 0xa7, 0x15,
	0x16, 0x3d, 0x7c, 0xb5, 0x6d, 0x2a, 0x46, 0xe5, 0x3f, 0xad, 0xb0, 0xdb, 0xc4, 0xd5, 0x11, 0x25,
	0xd0, 0x16, 0xdb, 0x14, 0x89, 0xb9, 0x65, 0x9d, 0xe8, 0x83, 0xef, 0x5e, 0xd6, 0x49, 0x35, 0xfd,
	0xe3, 0x9a, 0xbb, 0x4b, 0x9f, 0xef, 0x43, 0x0c, 0x86, 0x18, 0xa7, 0xff, 0x73, 0xbd, 0x6e, 0x3e,
	0xc7, 0x35, 0xb7, 0x2d, 0x28, 0xd7, 0x59, 0x22, 0x78, 0xc3, 0xd7, 0x20, 0x88, 0x98, 0xfb, 0x6c,
	0x56, 0xf5, 0xed, 0x8d, 0xd9, 0x9c, 0xa0, 0x71, 0xcd, 0x6d, 0x91, 0x8d, 0xfb, 0x49, 0xab, 0xf2,
	0x23, 0x0e, 0x69, 0xd8, 0xfb, 0xbd, 0x0e, 0xad, 0x0d, 0xb7, 0x08, 0xfa, 0x18, 0x20, 0x8c, 0xa2,
	0xac, 0x48, 0x69, 0xb5, 0x0e, 0x3b, 0x6e, 0x53, 0x20, 0x7c, 0x57, 0xc2, 0x88, 0x66, 0xec, 0xa7,
	0xa0, 0xf0, 0x5d, 0x61, 0x77, 0x3b, 0x46, 0x1f, 0x41, 0x53, 0xd8, 0x91, 0xc4, 0x6c, 0x0f, 0x64,
	0x57, 0xe3, 0x80, 0x1d, 0x23, 0x0f, 0x14, 0x5e, 0x1c, 0xdb, 0x03, 0x7d, 0xf0, 0xf5, 0xcb, 0x2c,
	0x62, 0x45, 0xba, 0x82, 0x0a, 0x7d, 0x0b, 0xca, 0x0d, 0x0e, 0x63, 0x9c, 0x77, 0xfe, 0x69, 0x33,
	0xa5, 0x3e, 0x7b, 0xc6, 0xba, 0xfe, 0x3b, 0xce, 0xc4, 0x61, 0xcc, 0x82, 0x5d, 0xf1, 0xe8, 0x7b,
	0x45, 0xfb, 0xb7, 0x6d, 0xfc, 0x66, 0x1c, 0xfd, 0x21, 0x55, 0x1a, 0x70, 0xe1, 0xd0, 0x01, 0xec,
	0x5d, 0x38, 0x67, 0xce, 0xf4, 0xca, 0x09, 0x7c, 0xdb, 0x3c, 0xb3, 0xfc, 0xc0, 0xf3, 0x87, 0xfe,
	0x85, 0x67, 0xd4, 0x90, 0x0a, 0xb2, 0x63, 0x5d, 0x19, 0x12, 0xd2, 0xa0, 0x31, 0x9d, 0x59, 0x8e,
	0x51, 0x47, 0x3a, 0xa8, 0x33, 0xcb, 0x19, 0xd9, 0xce, 0xa9, 0x21, 0x97, 0xf0, 0x78, 0x3a, 0x19,
	0x19, 0x0d, 0x04, 0xa0, 0x78, 0xd3, 0xc9, 0xa5, 0x35, 0x32, 0x76, 0xca, 0xb3, 0x39, 0x99, 0x7a,
	0xd6, 0xc8, 0x50, 0xca, 0xf0, 0x91, 0x35, 0xb1, 0x7c, 0x6b, 0x64, 0xa8, 0xa8, 0x05, 0xda, 0xd0,
	0x35, 0xc7, 0x76, 0x19, 0xa6, 0x1d, 0x3d, 0x42, 0x73, 0x3d, 0xe8, 0x68, 0x1f, 0x50, 0x55, 0x84,
	0x75, 0x69, 0x39, 0x7e, 0xe0, 0xff, 0x38, 0xb3, 0x8c, 0x1a, 0x7a, 0x0f, 0xda, 0xa2, 0x28, 0xd3,
	0xb5, 0x86, 0xbe, 0x3d, 0x75, 0x0c, 0x09, 0xbd, 0x0f, 0x86, 0x39, 0x3d, 0x3f, 0x2f, 0xc3, 0xd6,
	0x68, 0x1d, 0xbd, 0x85, 0x37, 0xbc, 0xf0, 0xc0, 0x1c, 0x0f, 0x9d, 0x53, 0xcb, 0x90, 0xd1, 0x1e,
	0xbc, 0x1d, 0x7a, 0x9e, 0x7d, 0xea, 0xf0, 0x58, 0x0e, 0x37, 0x4e, 0xea, 0x33, 0x69, 0xae, 0x30,
	0xbd, 0x3e, 0xff, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x5c, 0x39, 0x3a, 0x92, 0xb2, 0x06, 0x00, 0x00,
}
